name: Continuous Delivery
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  # _________                __  .__
  # \_   ___ \  ____   _____/  |_|__| ____  __ __  ____  __ __  ______
  # /    \  \/ /  _ \ /    \   __\  |/    \|  |  \/  _ \|  |  \/  ___/
  # \     \___(  <_> )   |  \  | |  |   |  \  |  (  <_> )  |  /\___ \
  #  \______  /\____/|___|  /__| |__|___|  /____/ \____/|____//____  >
  #         \/            \/             \/                        \/
  # .___        __                              __  .__
  # |   | _____/  |_  ____   ________________ _/  |_|__| ____   ____
  # |   |/    \   __\/ __ \ / ___\_  __ \__  \\   __\  |/  _ \ /    \
  # |   |   |  \  | \  ___// /_/  >  | \// __ \|  | |  (  <_> )   |  \
  # |___|___|  /__|  \___  >___  /|__|  (____  /__| |__|\____/|___|  /
  #          \/          \/_____/            \/                    \/

  # Reduce human error by compiling on new code.
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Build
        run: npm i && npm run build # Generates "artifact" (./dist folder)

  # Reduce human error by running unit tests
  # every time there's new code
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Run Tests
        run: npm i && npm t

  # Do you perform audits often? Probably not.
  # Having it here makes it a daily thing.
  audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Check For Security Issues
        run: npm audit --audit-level=critical

  # Do you perform static analysis at all? Here's a way to
  # integrate it into your day-to-day workflow.
  static-analysis:
    runs-on: ubuntu-latest
    steps:
      - run: echo 'Check for code smells'
      - run: echo 'Measure cyclomatic complexity'
      - run: echo 'Log results to a db for study'

  # _________                __  .__
  # \_   ___ \  ____   _____/  |_|__| ____  __ __  ____  __ __  ______
  # /    \  \/ /  _ \ /    \   __\  |/    \|  |  \/  _ \|  |  \/  ___/
  # \     \___(  <_> )   |  \  | |  |   |  \  |  (  <_> )  |  /\___ \
  #  \______  /\____/|___|  /__| |__|___|  /____/ \____/|____//____  >
  #         \/            \/             \/                        \/
  # ________                .__                                      __
  # \______ \   ____ ______ |  |   ____ ___.__. _____   ____   _____/  |_
  #  |    |  \_/ __ \\____ \|  |  /  _ <   |  |/     \_/ __ \ /    \   __\
  #  |    `   \  ___/|  |_> >  |_(  <_> )___  |  Y Y  \  ___/|   |  \  |
  # /_______  /\___  >   __/|____/\____// ____|__|_|  /\___  >___|  /__|
  #         \/     \/|__|               \/          \/     \/     \/

  # If you're using IAC, you would want to
  # create your stack here before you deploy
  create-infrastructure:
    runs-on: ubuntu-latest
    needs: [build, test, audit, static-analysis]
    steps:
      - run: echo 'Use CF or TF to stand up servers and services'

  # After you have established your infrastructure
  # you'll need to configure it, perhaps with
  # Ansible.
  configure-infrastructure:
    runs-on: ubuntu-latest
    needs: [create-infrastructure]
    steps:
      - run: echo 'Use Ansible to "remote in" to servers and configure them'

  # Reduce human error by deploying exactly
  # the same way every time.
  deploy-production:
    runs-on: ubuntu-latest
    needs: [configure-infrastructure]
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Build
        run: npm i && npm run build

      - name: Deploy
        uses: JamesIves/github-pages-deploy-action@releases/v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: dist

  # Automating a smoke test prevents friday
  # deploys from turning into weekend death
  # marches.
  verify-production:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Run Smoke Test
        run: export TEST_URL=https://codex.academy && npm i && npm run smoke && exit 1

  # Automating a rollback after failure cleans
  # up infrastructure and puts things back the
  # way they were before heads roll,
  rollback:
    runs-on: ubuntu-latest
    needs: [verify-production]
    if: failure() # Only run this step if there's a failure
    steps:
      - run: echo 'Revert production to original state in case of failure'

  # Further shorten the feedback loop by letting the whole team know of a failure.
  notify-failure-slack:
    if: failure()
    env:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_WEBHOOK }}
    uses: voxmedia/github-action-slack-notify-build@v1
    with:
      channel: website
      status: FAILED
      color: danger
